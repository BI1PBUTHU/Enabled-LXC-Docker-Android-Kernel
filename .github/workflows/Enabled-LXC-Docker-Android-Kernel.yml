name: Enabled-LXC-Docker-Android-Kernel

on: 
  workflow_dispatch:
    inputs:
      os_patch_level:
        required: true
        type: string
        description: >
          Patch level of common kernel manifest,
          for example: 2024-08
      version_name:
        required: true
        type: string
        description: >
          With SUBLEVEL of kernel,
          for example: android12-5.10.218
      custom:
        required: true
        type: boolean
        description: >
          Enable LXC, Docker
      kernelsu:
        required: true
        type: boolean
        description: >
          Enable KernelSU

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt install repo wget -y

    - name: Sync the kernel source code
      run: |
        cd $GITHUB_WORKSPACE
        mkdir android-kernel
        cd android-kernel
        repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b common-android12-5.10-${{ inputs.os_patch_level }}
        repo sync

    - name: Apply patches and configuration files
      if: ${{ inputs.custom == true }}
      run: |
        cd $GITHUB_WORKSPACE
        # 根据 version_name 判断要使用哪份 defconfig
        if [[ "${{ inputs.version_name }}" == android12* ]]; then
          echo "Detected Android12. Using gki_defconfig-docker-android12-5.10"
          cp ./config/gki_defconfig-docker-android12-5.10 ./android-kernel/common/arch/arm64/configs/gki_defconfig
        else
          echo "Detected Android13 or above. Using matching defconfig..."
          # 示例：如果 version_name = android13-5.15
          # 则对应本地的 "gki_defconfig-docker-android13-5.15"
          # 请根据项目中的实际 defconfig 文件命名进行替换
          cp "./config/gki_defconfig-docker-${{ inputs.version_name }}" ./android-kernel/common/arch/arm64/configs/gki_defconfig
        fi

        # 如有额外需要的 patch，可在此处启用
        # cd ./android-kernel/common
        # git apply $GITHUB_WORKSPACE/gki-patch/patchs/*.patch

    - name: KernelSU
      if: ${{ inputs.kernelsu == true }}
      run: |
          cd $GITHUB_WORKSPACE/android-kernel
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

    - name: Build Kernel
      run: |
        cd $GITHUB_WORKSPACE/android-kernel
        # 先执行 savedefconfig
        BUILD_CONFIG=common/build.config.gki.aarch64 build/config.sh savedefconfig

        # 根据 version_name 判断编译方式
        if [[ "${{ inputs.version_name }}" == android12* ]]; then
          echo "Detected Android12. Using LTO=thin with build/build.sh"
          LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh
        else
          echo "Detected Android13 or above. Using Bazel build"
          tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
        fi

    - name: Prepare artifacts
      id: prepareArtifacts
      run: |
        cd $GITHUB_WORKSPACE
        OUTDIR=android-kernel/out/android12-5.10/dist
        mkdir output

        # 拷贝出编译产物
        cp $OUTDIR/Image ./output/
        cp $OUTDIR/Image.lz4 ./output/
        cp $OUTDIR/Image ./
        gzip -n -k -f -9 Image > Image.gz

        # 处理 AnyKernel3
        git clone https://github.com/Kernel-SU/AnyKernel3
        rm -rf ./AnyKernel3/.git
        cp $OUTDIR/Image ./AnyKernel3/

        # 下载解包官方 boot.img 用于后续测试
        wget https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-${{ inputs.os_patch_level }}_r1.zip -O ./gki-kernel.zip
        unzip -q ./gki-kernel.zip
        rm ./gki-kernel.zip

        # 使用 Google 提供的 unpack_bootimg/mkbootimg 工具打包自定义 boot.img
        cd $GITHUB_WORKSPACE/android-kernel
        echo "Unpack official boot"
        ./tools/mkbootimg/unpack_bootimg.py --boot_img $GITHUB_WORKSPACE/boot*.img

        echo "Build boot.img"
        ./tools/mkbootimg/mkbootimg.py \
          --header_version 4 \
          --kernel out/android12-5.10/dist/Image \
          --ramdisk out/ramdisk \
          --os_version 12.0.0 \
          --os_patch_level ${{ inputs.os_patch_level }} \
          -o $GITHUB_WORKSPACE/output/${{ inputs.version_name }}_${{ inputs.os_patch_level }}-boot.img

        echo "Build boot-lz4.img"
        ./tools/mkbootimg/mkbootimg.py \
          --header_version 4 \
          --kernel out/android12-5.10/dist/Image.lz4 \
          --ramdisk out/ramdisk \
          --os_version 12.0.0 \
          --os_patch_level ${{ inputs.os_patch_level }} \
          -o $GITHUB_WORKSPACE/output/${{ inputs.version_name }}_${{ inputs.os_patch_level }}-boot-lz4.img

        echo "Build boot-gz.img"
        ./tools/mkbootimg/mkbootimg.py \
          --header_version 4 \
          --kernel $GITHUB_WORKSPACE/Image.gz \
          --ramdisk out/ramdisk \
          --os_version 12.0.0 \
          --os_patch_level ${{ inputs.os_patch_level }} \
          -o $GITHUB_WORKSPACE/output/${{ inputs.version_name }}_${{ inputs.os_patch_level }}-boot-gz.img

    - name: Upload Image and Image.gz and boot.img
      uses: actions/upload-artifact@v4
      with:
        name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
        path: ./output/*

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
        path: ./AnyKernel3/*
