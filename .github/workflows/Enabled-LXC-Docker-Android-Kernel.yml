name: Enabled-LXC-Docker-Android-Kernel

on: 
  workflow_dispatch:
    inputs:
      os_patch_level:
        required: true
        type: string
        description: >
          Patch level of common kernel manifest, e.g. "2024-08"
      version_name:
        required: true
        type: string
        description: >
          Kernel version name, e.g. "android12-5.10.218" or "android13-5.15.123"
      custom:
        required: true
        type: boolean
        description: >
          Enable LXC, Docker
      kernelsu:
        required: true
        type: boolean
        description: >
          Enable KernelSU

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install repo wget unzip -y

    - name: Sync the kernel source code
      run: |
        cd $GITHUB_WORKSPACE
        mkdir android-kernel
        cd android-kernel

        version="${{ inputs.version_name }}"
        patch="${{ inputs.os_patch_level }}"

        # 根据 version_name 判断需要 init 哪个分支
        if [[ "$version" == android12-5.10* ]]; then
          branch="common-android12-5.10-$patch"
        elif [[ "$version" == android13-5.15* ]]; then
          branch="common-android13-5.15-$patch"
        elif [[ "$version" == android14-5.15* ]]; then
          branch="common-android14-5.15-$patch"
        elif [[ "$version" == android14-6.1* ]]; then
          branch="common-android14-6.1-$patch"
        else
          echo "Unknown or unhandled version_name: $version"
          echo "Falling back to common-android12-5.10-$patch ..."
          branch="common-android12-5.10-$patch"
        fi

        echo "Using branch: $branch"
        repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b "$branch"
        repo sync

    - name: Apply patches and configuration files
      if: ${{ inputs.custom == true }}
      run: |
        cd $GITHUB_WORKSPACE
        
        mkdir android-kernel/docker
        
        cp docker/Kconfig android-kernel/docker

        # 在 arch/arm64/Kconfig（或你实际的 arch/<架构>/Kconfig）里增加 source "docker/Kconfig"
        echo 'source "docker/Kconfig"' >> arch/arm64/Kconfig

        echo "Docker kconfig cloned. You may need to enable other configs manually if not using SLMK."

    - name: KernelSU
      if: ${{ inputs.kernelsu == true }}
      run: |
        cd $GITHUB_WORKSPACE/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

    - name: Build Kernel
      run: |
        cd $GITHUB_WORKSPACE/android-kernel
        # 先执行 savedefconfig
        BUILD_CONFIG=common/build.config.gki.aarch64 build/config.sh savedefconfig

        # 根据 version_name 判断编译方式
        if [[ "${{ inputs.version_name }}" == android12-5.10* ]]; then
          echo "Detected Android12. Using build/build.sh"
          LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh
        else
          echo "Detected Android13 or above. Using Bazel build"
          tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
        fi

    - name: Prepare artifacts
      id: prepareArtifacts
      run: |
        cd $GITHUB_WORKSPACE/android-kernel

        # 提取短版本, e.g. "android12-5.10.218" -> "android12-5.10"
        short_version=$(echo "${{ inputs.version_name }}" | sed -E 's/^([^-]+-[0-9]+\.[0-9]+).*/\1/')
        echo "short_version = $short_version"

        # 拼接出 OUTDIR
        OUTDIR="$GITHUB_WORKSPACE/android-kernel/out/${short_version}/dist"

        # 如果目录不存在则回退到 out/dist
        if [ ! -d "$OUTDIR" ]; then
          echo "Warning: $OUTDIR doesn't exist. Falling back to $GITHUB_WORKSPACE/android-kernel/out/dist"
          OUTDIR="$GITHUB_WORKSPACE/android-kernel/out/dist"
        fi
        echo "Using OUTDIR = $OUTDIR"

        # 在 GITHUB_WORKSPACE 下新建一个 output 目录，用来放置最终产物
        mkdir -p $GITHUB_WORKSPACE/output

        # 拷贝内核产物到 output
        cp "$OUTDIR/Image" "$GITHUB_WORKSPACE/output/" || true
        cp "$OUTDIR/Image.lz4" "$GITHUB_WORKSPACE/output/" || true
        cp "$OUTDIR/Image" "$GITHUB_WORKSPACE/" || true

        # gzip
        cd $GITHUB_WORKSPACE
        if [ -f "Image" ]; then
          gzip -n -k -f -9 Image > Image.gz
        fi

        # 处理 AnyKernel3
        git clone https://github.com/Kernel-SU/AnyKernel3
        rm -rf ./AnyKernel3/.git
        if [ -f "$OUTDIR/Image" ]; then
          cp "$OUTDIR/Image" ./AnyKernel3/
        fi

        # 下载官方 boot.img 用于重新打包 (此处依然是 android12-5.10)
        # 如果针对 android13, 14, 等，要再做 if/else 下载不同链接
        wget "https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-${{ inputs.os_patch_level }}_r1.zip" -O ./gki-kernel.zip || true
        unzip -q ./gki-kernel.zip || true
        rm -f ./gki-kernel.zip

        cd $GITHUB_WORKSPACE/android-kernel

        # 根据 version_name 动态设置 --os_version
        if [[ "${{ inputs.version_name }}" == android12-* ]]; then
          os_version="12.0.0"
        elif [[ "${{ inputs.version_name }}" == android13-* ]]; then
          os_version="13.0.0"
        elif [[ "${{ inputs.version_name }}" == android14-* ]]; then
          os_version="14.0.0"
        else
          os_version="12.0.0"
        fi
        echo "Using --os_version=$os_version"

        if ls $GITHUB_WORKSPACE/boot*.img 1>/dev/null 2>&1; then
          echo "Unpack official boot"
          ./tools/mkbootimg/unpack_bootimg.py --boot_img $GITHUB_WORKSPACE/boot*.img
        fi

        if [ -f "$OUTDIR/Image" ]; then
          echo "Build boot.img"
          ./tools/mkbootimg/mkbootimg.py \
            --header_version 4 \
            --kernel "$OUTDIR/Image" \
            --ramdisk out/ramdisk \
            --os_version "$os_version" \
            --os_patch_level "${{ inputs.os_patch_level }}" \
            -o "$GITHUB_WORKSPACE/output/${{ inputs.version_name }}_${{ inputs.os_patch_level }}-boot.img"
        fi

        if [ -f "$OUTDIR/Image.lz4" ]; then
          echo "Build boot-lz4.img"
          ./tools/mkbootimg/mkbootimg.py \
            --header_version 4 \
            --kernel "$OUTDIR/Image.lz4" \
            --ramdisk out/ramdisk \
            --os_version "$os_version" \
            --os_patch_level "${{ inputs.os_patch_level }}" \
            -o "$GITHUB_WORKSPACE/output/${{ inputs.version_name }}_${{ inputs.os_patch_level }}-boot-lz4.img"
        fi

        if [ -f "$GITHUB_WORKSPACE/Image.gz" ]; then
          echo "Build boot-gz.img"
          ./tools/mkbootimg/mkbootimg.py \
            --header_version 4 \
            --kernel "$GITHUB_WORKSPACE/Image.gz" \
            --ramdisk out/ramdisk \
            --os_version "$os_version" \
            --os_patch_level "${{ inputs.os_patch_level }}" \
            -o "$GITHUB_WORKSPACE/output/${{ inputs.version_name }}_${{ inputs.os_patch_level }}-boot-gz.img"
        fi

    - name: Upload Images
      uses: actions/upload-artifact@v4
      with:
        name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
        path: ./output/*

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
        path: ./AnyKernel3/*
